name: Code Coverage

on: [pull_request]

jobs:
  base_branch_cov:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.base_ref }}
          
      - name: Set up .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'
          
      - name: Install dependencies
        run: dotnet restore
        
      - name: Install ReportGenerator
        run: dotnet tool install -g dotnet-reportgenerator-globaltool
        
      - name: Build the project
        run: dotnet build --configuration Release --no-restore
        
      - name: Run tests with coverage
        run: |
          mkdir -p ./coverage
          dotnet test --configuration Release --no-build --logger trx --collect:"XPlat Code Coverage" --results-directory ./coverage
          
      - name: Convert coverage to LCOV
        run: |
          # Find the coverage file and convert it to LCOV format
          COVERAGE_FILE=$(find ./coverage -name "coverage.cobertura.xml" | head -1)
          if [ -f "$COVERAGE_FILE" ]; then
            echo "Found coverage file: $COVERAGE_FILE"
            reportgenerator -reports:"$COVERAGE_FILE" -targetdir:./coverage -reporttypes:lcov
            # Rename the generated file to our expected name
            if [ -f "./coverage/lcov.info" ]; then
              mv ./coverage/lcov.info ./coverage/coverage.info
            fi
          else
            echo "No coverage file found, trying alternative method..."
            # Fallback to MSBuild integration
            dotnet test --configuration Release --no-build /p:CollectCoverage=true /p:CoverletOutputFormat=lcov /p:CoverletOutput=./coverage/coverage.info
          fi
          
      - name: Verify coverage file exists
        run: |
          if [ -f "./coverage/coverage.info" ]; then
            echo "Coverage file found at ./coverage/coverage.info"
            echo "File size: $(ls -lh ./coverage/coverage.info | awk '{print $5}')"
            echo "First few lines:"
            head -10 ./coverage/coverage.info
          else
            echo "Coverage file not found. Available files:"
            find ./coverage -type f -name "*" | head -10
          fi
          
      - name: Upload code coverage for ref branch
        uses: actions/upload-artifact@v4
        with:
          name: ref-coverage-info
          path: ./coverage/coverage.info

  checks:
    needs: base_branch_cov
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        
      - name: Set up .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'
          
      - name: Install dependencies
        run: dotnet restore
        
      - name: Install ReportGenerator
        run: dotnet tool install -g dotnet-reportgenerator-globaltool
        
      - name: Download code coverage report from base branch
        uses: actions/download-artifact@v4
        with:
          name: ref-coverage-info
          path: ./base-coverage/
          
      - name: Build the project
        run: dotnet build --configuration Release --no-restore
        
      - name: Run tests with coverage
        run: |
          mkdir -p ./coverage
          dotnet test --configuration Release --no-build --logger trx --collect:"XPlat Code Coverage" --results-directory ./coverage
          
      - name: Convert coverage to LCOV
        run: |
          # Find the coverage file and convert it to LCOV format
          COVERAGE_FILE=$(find ./coverage -name "coverage.cobertura.xml" | head -1)
          if [ -f "$COVERAGE_FILE" ]; then
            echo "Found coverage file: $COVERAGE_FILE"
            reportgenerator -reports:"$COVERAGE_FILE" -targetdir:./coverage -reporttypes:lcov
            # Rename the generated file to our expected name
            if [ -f "./coverage/lcov.info" ]; then
              mv ./coverage/lcov.info ./coverage/coverage.info
            fi
          else
            echo "No coverage file found, trying alternative method..."
            # Fallback to MSBuild integration
            dotnet test --configuration Release --no-build /p:CollectCoverage=true /p:CoverletOutputFormat=lcov /p:CoverletOutput=./coverage/coverage.info
          fi
          
      - name: Verify coverage files
        run: |
          echo "Current branch coverage:"
          if [ -f "./coverage/coverage.info" ]; then
            echo "✓ Current coverage file exists"
            ls -la ./coverage/coverage.info
          else
            echo "✗ Current coverage file missing"
          fi
          
          echo "Base branch coverage:"
          if [ -f "./base-coverage/coverage.info" ]; then
            echo "✓ Base coverage file exists"
            ls -la ./base-coverage/coverage.info
          else
            echo "✗ Base coverage file missing"
          fi
          
      - name: Generate Barecheck Code Coverage report
        uses: barecheck/code-coverage-action@v1
        with:
          barecheck-github-app-token: ${{ secrets.BARECHECK_GITHUB_APP_TOKEN }}
          lcov-file: ./coverage/coverage.info
          base-lcov-file: ./base-coverage/coverage.info
          minimum-ratio: 0
          send-summary-comment: true
          show-annotations: "warning"